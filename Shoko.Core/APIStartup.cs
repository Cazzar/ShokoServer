using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Shoko.Core.Addon;
using Shoko.Core.Extensions;
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Autofac;
using Autofac.Extensions.DependencyInjection;
using Swashbuckle.AspNetCore.Swagger;
using Microsoft.AspNetCore.Mvc.ApiExplorer;
using System.IO;
using System.Reflection;
using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.AspNetCore.Mvc;
using Shoko.Core.API;
using Shoko.Core.Config;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using Swashbuckle.AspNetCore.SwaggerUI;

namespace Shoko.Core
{
    public class APIStartup
    {
        private readonly IConfiguration _config;
        private readonly ILoggerFactory _loggerFactory;

        public APIStartup(IHostingEnvironment env, IConfiguration config,
            ILoggerFactory loggerFactory)
        {
            _config = config;
            _loggerFactory = loggerFactory;
        }

        public IServiceProvider ConfigureServices(IServiceCollection services)
        {
            services.AddSwaggerGen(
                c =>
                {
                    // resolve the IApiVersionDescriptionProvider service
                    // note: that we have to build a temporary service provider here because one has not been created yet
                    var provider = services.BuildServiceProvider().GetRequiredService<IApiVersionDescriptionProvider>();

                    // add a swagger document for each discovered API version
                    // note: you might choose to skip or document deprecated API versions differently
                    foreach (var description in provider.ApiVersionDescriptions)
                    {
                        c.SwaggerDoc(description.GroupName, CreateInfoForApiVersion(description));
                    }

                    // add a custom operation filter which sets default values
                    c.OperationFilter<SwaggerDefaultValues>();

                    c.AddSecurityDefinition("oauth2", new OAuth2Scheme()
                    {
                        Flow = "password",
                        AuthorizationUrl = "/api/auth",
                        TokenUrl = "/api/auth",
                        Type = "oauth2",
                        Scopes = new Dictionary<string, string> { { "user", "General user access to Shoko" }, { "admin", "Administrative access to shoko" } }
                    });

                    c.OperationFilter<SecurityRequirementsOperationFilter>();

                    // integrate xml comments
                    //Locate the XML file being generated by ASP.NET...
                    var xmlFile = "Shoko.Core.xml";
                    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                    if (File.Exists(xmlPath)) c.IncludeXmlComments(xmlPath);

                    foreach (Assembly ass in AddonRegistry.AssemblyToPluginMap.Keys)
                    {
                        var loc = ass.Location;
                        var xml = Path.Combine(Path.GetDirectoryName(loc), $"{Path.GetFileNameWithoutExtension(loc)}.xml");
                        if (File.Exists(xml)) c.IncludeXmlComments(xml); //Include the XML comments if it exists.
                    }
                });

            services.ConfigureSwaggerGen(options => { options.CustomSchemaIds(x => x.FullName); });
            services.AddCors();
            services.AddSignalR();

            var mvc = services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);
            foreach (Assembly ass in AddonRegistry.AssemblyToPluginMap.Keys)
            {
                if (ass == Assembly.GetCallingAssembly()) continue; //Skip the current assembly, this is implicitly added by ASP.
                mvc.AddApplicationPart(ass).AddControllersAsServices();
            }

            services.AddApiVersioning(o =>
            {
                o.ReportApiVersions = true;
                o.AssumeDefaultVersionWhenUnspecified = true;
                o.DefaultApiVersion = ApiVersion.Default;
                o.ApiVersionReader = new HeaderApiVersionReader("api-version");
            });
            services.AddVersionedApiExplorer();

            var key = Encoding.ASCII.GetBytes(ConfigurationLoader.CoreConfig.JwtSecret);
            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(x =>
            {
                x.RequireHttpsMetadata = false;
                x.SaveToken = true;
                x.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(key),
                    ValidateIssuer = false,
                    ValidateAudience = false
                };
            });

            services.AddAuthorization(c =>
            {
                c.AddPolicy("admin", p => p.RequireClaim("scope", "admin"));
            });

            //This HAS to be last.
            ShokoServer.AutofacContainerBuilder.Populate(services);
            return new AutofacServiceProvider(ShokoServer.AutofacContainer = ShokoServer.AutofacContainerBuilder.Build());
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app.UseCors(x => x.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());

            app.UseAuthentication();

            app.UseSwagger();
            app.UseSwaggerUI(
                c =>
                {
                    // build a swagger endpoint for each discovered API version
                    var provider = app.ApplicationServices.GetRequiredService<IApiVersionDescriptionProvider>();
                    foreach (var description in provider.ApiVersionDescriptions)
                    {
                        c.SwaggerEndpoint($"/swagger/{description.GroupName}/swagger.json", description.GroupName.ToUpperInvariant());
                    }

                    c.OAuthClientId("not-needed");
                    c.OAuthClientSecret("not-needed");
                    c.OAuthScopeSeparator(" ");

                    c.DefaultModelExpandDepth(2);
                    c.DefaultModelRendering(ModelRendering.Model);
                    c.DefaultModelsExpandDepth(-1);
                    c.DisplayOperationId();
                    c.DisplayRequestDuration();
                    c.DocExpansion(DocExpansion.None);
                    c.EnableDeepLinking();
                    c.EnableFilter();
                    c.MaxDisplayedTags(5);
                    c.ShowExtensions();
                    c.EnableValidator();
                    c.SupportedSubmitMethods(SubmitMethod.Get, SubmitMethod.Head);
                });

            app.UseSignalR(routes =>
            {
                //Add any Shoko Core hubs here..

                foreach (ISignalRPlugin plugin in AddonRegistry.Plugins.Values.AsEnumerable().Where(pl => pl is ISignalRPlugin).Select(pl => (ISignalRPlugin)pl))
                    plugin.RegisterSignalR(routes);
            });

            app.UseMvc();
        }


        static Info CreateInfoForApiVersion(ApiVersionDescription description)
        {
            var info = new Info()
            {
                Title = $"Shoko API {description.ApiVersion}",
                Version = description.ApiVersion.ToString(),
                Description = "Shoko Server API.",
            };

            if (description.IsDeprecated)
            {
                info.Description += " This API version has been deprecated.";
            }

            return info;
        }
    }
}
