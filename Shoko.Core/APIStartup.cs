using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Shoko.Core.Addon;
using Shoko.Core.Extensions;
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Autofac;
using Autofac.Extensions.DependencyInjection;
using Swashbuckle.AspNetCore.Swagger;
using Microsoft.AspNetCore.Mvc.ApiExplorer;
using Swashbuckle.AspNetCore.SwaggerGen;
using System.IO;
using System.Reflection;
using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.AspNetCore.Mvc;

namespace Shoko.Core
{
    public class APIStartup
    {
        private readonly IConfiguration _config;
        private readonly ILoggerFactory _loggerFactory;

        public APIStartup(IHostingEnvironment env, IConfiguration config,
            ILoggerFactory loggerFactory)
        {
            _config = config;
            _loggerFactory = loggerFactory;
        }

        public IServiceProvider ConfigureServices(IServiceCollection services)
        {
            services.AddSwaggerGen(
                options =>
                {
                    // resolve the IApiVersionDescriptionProvider service
                    // note: that we have to build a temporary service provider here because one has not been created yet
                    var provider = services.BuildServiceProvider().GetRequiredService<IApiVersionDescriptionProvider>();

                    // add a swagger document for each discovered API version
                    // note: you might choose to skip or document deprecated API versions differently
                    foreach (var description in provider.ApiVersionDescriptions)
                    {
                        options.SwaggerDoc(description.GroupName, CreateInfoForApiVersion(description));
                    }

                    // add a custom operation filter which sets default values
                    options.OperationFilter<SwaggerDefaultValues>();

                    // integrate xml comments
                    //Locate the XML file being generated by ASP.NET...
                    var xmlFile = "Shoko.Server.API.xml";
                    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                    if (File.Exists(xmlPath)) options.IncludeXmlComments(xmlPath);

                    foreach (Assembly ass in AddonRegistry.AssemblyToPluginMap.Keys)
                    {
                        var loc = ass.Location;
                        var xml = Path.Combine(Path.GetDirectoryName(loc), $"{Path.GetFileNameWithoutExtension(loc)}.xml");
                        if (File.Exists(xml)) options.IncludeXmlComments(xml); //Include the XML comments if it exists.
                    }
                });

            services.ConfigureSwaggerGen(options => { options.CustomSchemaIds(x => x.FullName); });

            services.AddSignalR();

            var mvc = services.AddMvc();
            foreach (Assembly ass in AddonRegistry.AssemblyToPluginMap.Keys)
            {
                if (ass == Assembly.GetCallingAssembly()) continue; //Skip the current assembly, this is implicitly added by ASP.
                mvc.AddApplicationPart(ass).AddControllersAsServices();
            }

            services.AddApiVersioning(o =>
            {
                o.ReportApiVersions = true;
                o.AssumeDefaultVersionWhenUnspecified = true;
                o.DefaultApiVersion = ApiVersion.Default;
                o.ApiVersionReader = ApiVersionReader.Combine(
                    new QueryStringApiVersionReader(),
                    new HeaderApiVersionReader("api-version")
                    //new ShokoApiReader()
                );
            });
            services.AddVersionedApiExplorer();

            //This HAS to be last.
            ShokoServer.AutofacContainerBuilder.Populate(services);
            return new AutofacServiceProvider(ShokoServer.AutofacContainer = ShokoServer.AutofacContainerBuilder.Build());
        }

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app.UseSwagger();
            app.UseSwaggerUI(
                options =>
                {
                    // build a swagger endpoint for each discovered API version
                    var provider = app.ApplicationServices.GetRequiredService<IApiVersionDescriptionProvider>();
                    foreach (var description in provider.ApiVersionDescriptions)
                    {
                        options.SwaggerEndpoint($"/swagger/{description.GroupName}/swagger.json", description.GroupName.ToUpperInvariant());
                    }
                });

            app.UseSignalR(routes =>
            {
                //Add any Shoko Core hubs here..

                foreach (ISignalRPlugin plugin in AddonRegistry.Plugins.Values.AsEnumerable().Where(pl => pl is ISignalRPlugin).Select(pl => (ISignalRPlugin)pl))
                    plugin.RegisterSignalR(routes);
            });

            app.UseMvc();
        }




        static Info CreateInfoForApiVersion(ApiVersionDescription description)
        {
            var info = new Info()
            {
                Title = $"Shoko API {description.ApiVersion}",
                Version = description.ApiVersion.ToString(),
                Description = "Shoko Server API.",
            };

            if (description.IsDeprecated)
            {
                info.Description += " This API version has been deprecated.";
            }

            return info;
        }


        public class SwaggerDefaultValues : IOperationFilter
        {
            /// <summary>
            /// Applies the filter to the specified operation using the given context.
            /// </summary>
            /// <param name="operation">The operation to apply the filter to.</param>
            /// <param name="context">The current operation filter context.</param>
            public void Apply(Operation operation, OperationFilterContext context)
            {
                if (operation.Parameters == null)
                {
                    return;
                }

                // REF: https://github.com/domaindrivendev/Swashbuckle.AspNetCore/issues/412
                // REF: https://github.com/domaindrivendev/Swashbuckle.AspNetCore/pull/413
                foreach (var parameter in operation.Parameters.OfType<NonBodyParameter>())
                {
                    var description = context.ApiDescription.ParameterDescriptions.First(p => p.Name == parameter.Name);
                    var routeInfo = description.RouteInfo;

                    if (parameter.Description == null)
                    {
                        parameter.Description = description.ModelMetadata?.Description;
                    }

                    if (routeInfo == null)
                    {
                        continue;
                    }

                    if (parameter.Default == null)
                    {
                        parameter.Default = routeInfo.DefaultValue;
                    }

                    parameter.Required |= !routeInfo.IsOptional;
                }
            }
        }
    }
}
